import mediapipe as mp
from ctypes import cast, POINTER
from math import hypot
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
from comtypes import CLSCTX_ALL
import numpy as np
import cv2
cap = cv2.VideoCapture(0)

Draw = mp.solutions.drawing_utils
HumanHands = mp.solutions.hands
hands = HumanHands.Hands()

devices = AudioUtilities.GetSpeakers()
interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
volume = cast(interface, POINTER(IAudioEndpointVolume))

volMin, volMax = volume.GetVolumeRange()[:2]

while True:
    success, img = cap.read()
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)

    lmList = []
    if results.multi_hand_landmarks:
        for handlandmark in results.multi_hand_landmarks:
            for id, lm in enumerate(handlandmark.landmark):
                h, w, _ = img.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                lmList.append([id, cx, cy])
            Draw.draw_landmarks(img, handlandmark, HumanHands.HAND_CONNECTIONS)

    if lmList != []:
        a, b = lmList[4][1], lmList[4][2]
        c, d = lmList[8][1], lmList[8][2]

        cv2.circle(img, (a, b), 4, (255, 0, 0), cv2.FILLED)
        cv2.circle(img, (c, d), 4, (255, 0, 0), cv2.FILLED)
        cv2.line(img, (a, b), (c, d), (255, 0, 0), 3)
        length = hypot(c - a, d - b)
        vol = np.interp(length, [15, 220], [volMin, volMax])
        print(vol, length)
        volume.SetMasterVolumeLevel(vol, None)
        # Hand range 15 - 220
        # Volume range -63.5 - 0.0
    cv2.imshow('Image', img)
    if cv2.waitKey(1) & 0xff == ord('q'):
        break
